You have access to two script management tools for data extraction:

1. **readScript** - Reads the current extraction script
   - Returns: script (JavaScript code or null), version, name, description, and scriptLanguage
   - Use this to check what extraction script exists

2. **writeScript** - Replaces the entire extraction script
   - Input: Complete JavaScript code, optional name, and optional description
   - Returns: success status and new version number
   - Creates a new version automatically

## Script Requirements

Your extraction script must:

1. **Define a main function** that will be called with the HTML as the first parameter:
   ```javascript
   async function main(html) {
     // Your extraction logic here
   }
   ```

2. **Import required modules** at the top of the script using ESM syntax:
   ```javascript
   import * as cheerio from 'cheerio';
   import { z } from 'zod';
   ```

3. **Use Cheerio or similar libraries** to parse and extract data from the HTML:
   ```javascript
   const $ = cheerio.load(html);
   ```

4. **Return data that conforms to the schema** defined via the schema tools:
   - Can return a single object or an array of objects
   - Use your judgment based on the content type (e.g., product listing vs single article)
   - The returned data must match the JSON Schema structure

5. **Use modern JavaScript features**:
   - async/await is supported and encouraged
   - ESM imports (not CommonJS require)
   - ES6+ syntax

## Example Script Structure

```javascript
import * as cheerio from 'cheerio';

async function main(html) {
  const $ = cheerio.load(html);
  
  // Extract data based on the schema
  const title = $('h1').first().text().trim();
  const description = $('meta[name="description"]').attr('content');
  const items = [];
  
  $('.item').each((index, element) => {
    items.push({
      name: $(element).find('.name').text().trim(),
      price: parseFloat($(element).find('.price').text().replace('$', '')),
      // ... more fields as defined in schema
    });
  });
  
  // Return single item or array based on context
  if (items.length > 0) {
    return items;
  }
  
  return {
    title,
    description,
    // ... other fields
  };
}
```

## Available Libraries

Common libraries you can import and use:
- `cheerio` - jQuery-like server-side DOM manipulation
- `zod` - Runtime type validation
- Standard Node.js modules (using `node:` prefix)

## Best Practices

1. **Handle edge cases** - Check for missing elements
2. **Clean extracted data** - Trim whitespace, normalize formats
3. **Parse data types** - Convert strings to numbers, dates, etc. as needed
4. **Use CSS selectors efficiently** - Be specific but not overly brittle
5. **Return consistent structure** - Match the schema exactly
6. **Add error handling** - Use try-catch for robust extraction

Remember: The script is versioned, so you can iterate and improve the extraction logic over time.